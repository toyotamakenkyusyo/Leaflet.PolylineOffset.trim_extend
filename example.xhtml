<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<meta charset="UTF-8" />
		<link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.1/dist/leaflet.css" />
		<script src="https://unpkg.com/leaflet@1.3.1/dist/leaflet.js"></script>
		<script src="https://cdn.jsdelivr.net/npm/leaflet-polylineoffset-lc@1.2.0/leaflet.polylineoffset.min.js"></script>
		<script src="leaflet.polylineoffset.trim_extend.js"></script>
		<title>Leaflet.PolylineOffset.trim_extend</title>
	</head>
	<body>
		<h1>Leaflet.PolylineOffset.trim_extend</h1>
		<p>豐多摩研究所 トップページ <a href="https://ss1.xrea.com/toyotama.g1.xrea.com/index.xhtml">https://ss1.xrea.com/toyotama.g1.xrea.com/index.xhtml</a></p>
		<p>GitHub Leaflet.PolylineOffset.trim_extend <a href="https://github.com/toyotamakenkyusyo/Leaflet.PolylineOffset.trim_extend">https://github.com/toyotamakenkyusyo/Leaflet.PolylineOffset.trim_extend</a></p>
		<div id="div_leaflet" style="height: 768px; width: auto; background-color: #FFFFFF;"></div>
		<script type="text/javascript">
		//<![CDATA[

f_input_geojson();

async function f_input_geojson(a) {
	const c_geojson = await ((await (fetch("example.geojson"))).json());
	
	const c_offset_scale = 4;
	const c_join_trim = 1;
	
	// 最初と最後の角度を計算する
	for (const c_feature of c_geojson["features"]) {
		const c_p0 = c_feature["geometry"]["coordinates"][0];
		const c_p1 = c_feature["geometry"]["coordinates"][1];
		const c_p2 = c_feature["geometry"]["coordinates"][c_feature["geometry"]["coordinates"].length - 2];
		const c_p3 = c_feature["geometry"]["coordinates"][c_feature["geometry"]["coordinates"].length - 1];
		// 角度は緯度経度から-1倍してSVG（下向き正）に合わせる
		c_feature["properties"]["start_angle"] = -1 * Math.atan2(c_p1[1] - c_p0[1], (c_p1[0] - c_p0[0]) * Math.cos(c_p0[1] * Math.PI / 180));
		c_feature["properties"]["end_angle"] = -1 * Math.atan2(c_p3[1] - c_p2[1], (c_p3[0] - c_p2[0]) * Math.cos(c_p3[1] * Math.PI / 180));
	}
	
	// 前後との角度の差を計算する
	const c_string_seq_index = {};
	for (const c_feature of c_geojson["features"]) {
		if (c_string_seq_index[c_feature["properties"]["string_id"]] === undefined) {
			c_string_seq_index[c_feature["properties"]["string_id"]] = {};
		}
		c_string_seq_index[c_feature["properties"]["string_id"]][c_feature["properties"]["substr_seq"]] = c_feature;
	}
	for (const c_feature of c_geojson["features"]) {
		const c_pre_feature = c_string_seq_index[c_feature["properties"]["string_id"]][c_feature["properties"]["substr_seq"] - 1];
		const c_post_feature = c_string_seq_index[c_feature["properties"]["string_id"]][c_feature["properties"]["substr_seq"] + 1];
		
		c_feature["properties"]["start_trim"] = 0;
		c_feature["properties"]["start_add_x"] = 0;
		c_feature["properties"]["start_add_y"] = 0;
		if (c_pre_feature !== undefined) {
			c_start_angle_difference = c_feature["properties"]["start_angle"] - c_pre_feature["properties"]["end_angle"];
			if (Math.abs(c_start_angle_difference) < Math.PI / 8 || 15 * Math.PI / 8 < Math.abs(c_start_angle_difference)) {
				c_feature["properties"]["start_trim"] = c_join_trim;
				
				const c_x = c_join_trim * Math.cos(c_feature["properties"]["start_angle"]) - c_feature["properties"]["offset"] * Math.sin(c_feature["properties"]["start_angle"]);
				const c_y = c_join_trim * Math.sin(c_feature["properties"]["start_angle"]) + c_feature["properties"]["offset"] * Math.cos(c_feature["properties"]["start_angle"]);
				const c_pre_x = -1 * c_join_trim * Math.cos(c_pre_feature["properties"]["end_angle"]) - c_pre_feature["properties"]["offset"] * Math.sin(c_pre_feature["properties"]["end_angle"]);
				const c_pre_y = -1 * c_join_trim * Math.sin(c_pre_feature["properties"]["end_angle"]) + c_pre_feature["properties"]["offset"] * Math.cos(c_pre_feature["properties"]["end_angle"]);
				c_feature["properties"]["start_add_x"] = (c_pre_x - c_x) / 2;
				c_feature["properties"]["start_add_y"] = (c_pre_y - c_y) / 2;
			} else {
				c_feature["properties"]["start_trim"] = c_pre_feature["properties"]["offset"] / Math.sin(c_start_angle_difference) - c_feature["properties"]["offset"] / Math.tan(c_start_angle_difference);
			}
		}
		
		c_feature["properties"]["end_extend"] = 0;
		if (c_post_feature !== undefined) {
			c_end_angle_difference = c_post_feature["properties"]["start_angle"] - c_feature["properties"]["end_angle"];
			if (Math.abs(c_end_angle_difference) < Math.PI / 8 || 15 * Math.PI / 8 < Math.abs(c_end_angle_difference)) {
				c_feature["properties"]["end_extend"] = -1 * c_join_trim;
				
				const c_x = -1 * c_join_trim * Math.cos(c_feature["properties"]["end_angle"]) - c_feature["properties"]["offset"] * Math.sin(c_feature["properties"]["end_angle"]);
				const c_y = -1 * c_join_trim * Math.sin(c_feature["properties"]["end_angle"]) + c_feature["properties"]["offset"] * Math.cos(c_feature["properties"]["end_angle"]);
				const c_post_x = c_join_trim * Math.cos(c_post_feature["properties"]["start_angle"]) - c_post_feature["properties"]["offset"] * Math.sin(c_post_feature["properties"]["start_angle"]);
				const c_post_y = c_join_trim * Math.sin(c_post_feature["properties"]["start_angle"]) + c_post_feature["properties"]["offset"] * Math.cos(c_post_feature["properties"]["start_angle"]);
				c_feature["properties"]["end_add_x"] = (c_post_x - c_x) / 2;
				c_feature["properties"]["end_add_y"] = (c_post_y - c_y) / 2;
			} else {
				c_feature["properties"]["end_extend"] = -1 * c_post_feature["properties"]["offset"] / Math.sin(c_end_angle_difference) + c_feature["properties"]["offset"] / Math.tan(c_end_angle_difference);
			}
		}
	}
	
	// leaflet関係
	map = L.map("div_leaflet"); // leafletの読み込み。
	L.tileLayer("https://cyberjapandata.gsi.go.jp/xyz/pale/{z}/{x}/{y}.png", {opacity: 0.5, attribution: "<a href=\"https://maps.gsi.go.jp/development/ichiran.html\">地理院タイル</a>"}).addTo(map); // 背景地図（地理院地図）を表示する。
	
	for (const c_feature of c_geojson["features"]) {
		L.polyline(
			L.GeoJSON.coordsToLatLngs(c_feature["geometry"]["coordinates"], 0), 
			{
				"color": "#" + c_feature["properties"]["route_color"],
				"weight": 2,
				"opacity": 1,
				"start_trim": c_offset_scale * c_feature["properties"]["start_trim"],
				"end_extend": c_offset_scale * c_feature["properties"]["end_extend"],
				"start_add_x": c_offset_scale * c_feature["properties"]["start_add_x"],
				"start_add_y": c_offset_scale * c_feature["properties"]["start_add_y"],
				"end_add_x": c_offset_scale * c_feature["properties"]["end_add_x"],
				"end_add_y": c_offset_scale * c_feature["properties"]["end_add_y"],
				"offset": c_offset_scale * c_feature["properties"]["offset"],
				"offset_scale": c_offset_scale
			}
		).addTo(map);
	}
	map.setView([34.75,134], 12);
}


		//]]>
		</script>
	</body>
</html>
